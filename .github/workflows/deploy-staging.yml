name: Deploy staging
run-name: 'Deploy staging'

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: read
  deployments: write
  pull-requests: write

concurrency:
  group: deploy-staging-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-code-checks:
    name: '🔍 Run code quality checks'
    uses: nightstem/nightstem-web/.github/workflows/run-code-checks.yml@main
    secrets: inherit

  build-and-deploy:
    name: '🚀 Build and deploy to staging'
    environment: staging
    needs: run-code-checks
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build project
        uses: nightstem/nightstem-web/.github/actions/build-project@main
        env:
          NEXT_PUBLIC_FEATURE_FLAG_HOST: ${{ vars.NEXT_PUBLIC_FEATURE_FLAG_HOST }}
          NEXT_PUBLIC_FEATURE_FLAG_CLIENT_KEY: ${{ vars.NEXT_PUBLIC_FEATURE_FLAG_CLIENT_KEY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Cloudflare Pages
        id: deploy
        uses: nightstem/nightstem-web/.github/actions/deploy-cloudflare@main
        with:
          cloudflare-api-token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          cloudflare-account-id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          project-name: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          build-output-directory: ${{ secrets.BUILD_OUTPUT_DIRECTORY }}
          environment: preview

      - name: Attach URL to environment deployment
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const ref   = context.sha;
            const env   = 'staging';

            // Find the auto-created deployment for this job/environment
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner, repo, ref, environment: env
            });
            if (!deployments.length) {
              core.setFailed(`No deployment found for ${env} on ${ref}`);
              return;
            }

            // Pick the latest one
            const deployment = deployments.sort(
              (a, b) => new Date(b.created_at) - new Date(a.created_at)
            )[0];

            const url = `${{ steps.deploy.outputs.deployment_alias != '' && steps.deploy.outputs.deployment_alias || steps.deploy.outputs.deployment_url }}`;

            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: deployment.id,
              state: 'success',
              environment_url: url,
              log_url: `https://github.com/${owner}/${repo}/actions/runs/${process.env.GITHUB_RUN_ID}`,
              description: 'Staging is live',
              auto_inactive: false
            });
