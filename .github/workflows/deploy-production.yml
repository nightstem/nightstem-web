name: Deploy production
run-name: 'Deploy production (${{ inputs.bump }} bump)'

on:
  workflow_dispatch:
    inputs:
      bump:
        description: 'Version bump type (patch: bug fixes, minor: new features, major: breaking changes)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  deployments: write

concurrency:
  group: deploy-production-${{ github.ref }}
  cancel-in-progress: false

jobs:
  run-code-checks:
    name: 'üîç Run code quality checks'
    uses: nightstem/nightstem-web/.github/workflows/run-code-checks.yml@main
    secrets: inherit

  bump-version:
    name: 'üìà Bump version and create tag'
    runs-on: ubuntu-latest
    needs: run-code-checks
    timeout-minutes: 10
    outputs:
      new_version: ${{ steps.bump-version-step.outputs.new_version }}
    steps:
      - name: Generate App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: nightstem-web

      - name: Bump version
        id: bump-version-step
        uses: nightstem/nightstem-web/.github/actions/bump-version@main
        with:
          bump: ${{ inputs.bump }}
          github-token: ${{ steps.generate-token.outputs.token }}

  create-pre-release:
    name: 'üè∑Ô∏è Create GitHub pre-release'
    runs-on: ubuntu-latest
    needs: bump-version
    timeout-minutes: 5
    outputs:
      release_id: ${{ steps.create-pre-release-step.outputs.result }}
    steps:
      - name: Generate App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: nightstem-web

      - name: Create pre-release
        id: create-pre-release-step
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ needs.bump-version.outputs.new_version }}',
              name: '${{ needs.bump-version.outputs.new_version }}',
              prerelease: true,
              draft: false,
              generate_release_notes: true
            });

            console.log(`Pre-release created: ${release.html_url}`);
            return release.id;
          result-encoding: string

  build-and-deploy:
    name: 'üöÄ Build and deploy to production'
    environment: production
    permissions:
      contents: read
      deployments: write
    runs-on: ubuntu-latest
    needs: [bump-version, create-pre-release]
    timeout-minutes: 20
    steps:
      - name: Checkout updated code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Build project
        uses: nightstem/nightstem-web/.github/actions/build-project@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Cloudflare Pages
        uses: nightstem/nightstem-web/.github/actions/deploy-cloudflare@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cloudflare-api-token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          cloudflare-account-id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          project-name: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          build-output-directory: ${{ secrets.BUILD_OUTPUT_DIRECTORY }}
          environment: production

  publish_release_on_success:
    name: '‚úÖ Publish final release'
    environment: production
    runs-on: ubuntu-latest
    needs: [create-pre-release, build-and-deploy]
    if: ${{ success() }}
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: nightstem-web

      - name: Update pre-release to release
        uses: jhonny17/actions/update-release@main
        with:
          github_token: ${{ steps.generate-token.outputs.token }}
          release_id: ${{ needs.create-pre-release.outputs.release_id }}
          prerelease: false
          draft: false

  delete_release_on_failure:
    name: 'üßπ Cleanup on failure'
    runs-on: ubuntu-latest
    needs: [bump-version, create-pre-release, build-and-deploy]
    if: ${{ failure() || cancelled() }}
    timeout-minutes: 10
    steps:
      - name: Generate App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: nightstem-web

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}

      - name: Delete release
        continue-on-error: true
        uses: jhonny17/actions/delete-release@main
        with:
          github_token: ${{ steps.generate-token.outputs.token }}
          release_id: ${{ needs.create-pre-release.outputs.release_id }}

      - name: Delete tag
        continue-on-error: true
        uses: jhonny17/actions/delete-tag@main
        with:
          github_token: ${{ steps.generate-token.outputs.token }}
          build_version: ${{ needs.bump-version.outputs.new_version }}

      - name: Revert version bump commit
        continue-on-error: true
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Find the version bump commit and revert only the package.json change
          BUMP_COMMIT=$(git log --oneline --grep="chore(release): bump version" -n 1 | cut -d' ' -f1)

          if [ -n "$BUMP_COMMIT" ]; then
            echo "Found version bump commit: $BUMP_COMMIT"
            
            # Get the previous version from package.json before the bump
            PREV_VERSION=$(git show HEAD~1:package.json | grep '"version":' | cut -d'"' -f4)
            echo "Reverting to previous version: $PREV_VERSION"
            
            # Update package.json to previous version
            git checkout HEAD~1 -- package.json
            
            # Create a new commit with the revert
            git add package.json
            git commit -m "Revert version bump due to deployment failure (back to $PREV_VERSION)"
            
            # Push the revert
            git push origin main
          else
            echo "No version bump commit found, skipping revert"
          fi
