name: Deploy production
run-name: 'Deploy production (${{ inputs.bump }} bump)'

on:
  workflow_dispatch:
    inputs:
      bump:
        description: 'Version bump type (patch: bug fixes, minor: new features, major: breaking changes)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  deployments: write

concurrency:
  group: deploy-production-${{ github.ref }}
  cancel-in-progress: false

jobs:
  run-code-checks:
    name: '🔍 Run code quality checks'
    uses: nightstem/nightstem-web/.github/workflows/run-code-checks.yml@main
    secrets: inherit

  bump-version:
    name: '📈 Bump version and create tag'
    runs-on: ubuntu-latest
    needs: run-code-checks
    timeout-minutes: 10
    outputs:
      new_version: ${{ steps.bump-version-step.outputs.new_version }}
    steps:
      - name: Generate App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: nightstem-web

      - name: Bump version
        id: bump-version-step
        uses: nightstem/nightstem-web/.github/actions/bump-version@main
        with:
          bump: ${{ inputs.bump }}
          github-token: ${{ steps.generate-token.outputs.token }}

  create-pre-release:
    name: '🏷️ Create GitHub pre-release'
    runs-on: ubuntu-latest
    needs: bump-version
    timeout-minutes: 5
    outputs:
      release_id: ${{ steps.create-pre-release-step.outputs.result }}
    steps:
      - name: Generate App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: nightstem-web

      - name: Create pre-release
        id: create-pre-release-step
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ needs.bump-version.outputs.new_version }}',
              name: '${{ needs.bump-version.outputs.new_version }}',
              body: '🚀 Release in progress... commit details and deployment info will be added shortly.',
              prerelease: true,
              draft: false
            });

            console.log(`Pre-release created: ${release.html_url}`);
            return release.id;
          result-encoding: string

  build-and-deploy:
    name: '🚀 Build and deploy to production'
    environment: production
    permissions:
      contents: read
      deployments: write
    runs-on: ubuntu-latest
    needs: [bump-version, create-pre-release]
    timeout-minutes: 20
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: Checkout updated code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Build project
        uses: nightstem/nightstem-web/.github/actions/build-project@main
        env:
          NEXT_PUBLIC_FEATURE_FLAG_HOST: ${{ vars.NEXT_PUBLIC_FEATURE_FLAG_HOST }}
          NEXT_PUBLIC_FEATURE_FLAG_CLIENT_KEY: ${{ vars.NEXT_PUBLIC_FEATURE_FLAG_CLIENT_KEY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Cloudflare Pages
        id: deploy
        uses: nightstem/nightstem-web/.github/actions/deploy-cloudflare@main
        with:
          cloudflare-api-token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          cloudflare-account-id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          project-name: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          build-output-directory: ${{ secrets.BUILD_OUTPUT_DIRECTORY }}
          environment: production

  update-release-with-deployment:
    name: '📝 Update pre-release with deployment info'
    runs-on: ubuntu-latest
    needs: [bump-version, create-pre-release, build-and-deploy]
    if: ${{ success() }}
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: nightstem-web

      - name: Update pre-release with deployment URL
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            // Get the previous tag (second most recent, since bump-version just created a new one)
            const newTag = '${{ needs.bump-version.outputs.new_version }}';
            let previousTag = null;

            // Add a small delay to ensure tag is available in API
            await new Promise(resolve => setTimeout(resolve, 2000));

            try {
              const { data: tags } = await github.rest.repos.listTags({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 10
              });
              
              console.log(`Available tags: ${tags.map(t => t.name).join(', ')}`);
              console.log(`Looking for new tag: ${newTag}`);
              
              // Find the new tag and the previous one
              const newTagIndex = tags.findIndex(tag => tag.name === newTag);
              if (newTagIndex >= 0 && newTagIndex < tags.length - 1) {
                previousTag = tags[newTagIndex + 1].name;
              } else if (tags.length > 1 && newTag) {
                // Fallback: assume first tag is newest, second is previous
                previousTag = tags[1].name;
              }
              
              console.log(`New tag: ${newTag}, Previous tag: ${previousTag || 'none'}`);
            } catch (error) {
              console.log('No previous tags found or error fetching tags:', error.message);
            }

            // Get commits since the last tag
            let commits = [];
            if (previousTag && newTag) {
              try {
                const { data: comparison } = await github.rest.repos.compareCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  base: previousTag,
                  head: newTag
                });
                commits = comparison.commits;
                console.log(`Found ${commits.length} commits between ${previousTag} and ${newTag}`);
              } catch (error) {
                console.log('Error comparing commits:', error.message);
                // Fallback: get recent commits if comparison fails
                try {
                  const { data: recentCommits } = await github.rest.repos.listCommits({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    per_page: 10
                  });
                  commits = recentCommits;
                  console.log(`Fallback: found ${commits.length} recent commits`);
                } catch (fallbackError) {
                  console.log('Fallback commit fetch also failed:', fallbackError.message);
                }
              }
            } else if (newTag) {
              // If no previous tag (first release), get commits up to the new tag
              try {
                const { data: recentCommits } = await github.rest.repos.listCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: newTag,
                  per_page: 50
                });
                commits = recentCommits;
                console.log(`First release: found ${commits.length} commits up to ${newTag}`);
              } catch (error) {
                console.log('Error fetching commits for first release:', error.message);
              }
            } else {
              // If newTag is missing, get recent commits
              try {
                const { data: recentCommits } = await github.rest.repos.listCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: 10
                });
                commits = recentCommits;
                console.log(`No tag info available: found ${commits.length} recent commits`);
              } catch (error) {
                console.log('Error fetching recent commits:', error.message);
              }
            }

            // Generate commit table
            let commitTable = '';
            if (commits.length > 0) {
              commitTable = '\n\n## Commits since last release\n\n';
              commitTable += '| Author | Hash | Description |\n';
              commitTable += '|--------|------|-------------|\n';
              
              commits.forEach(commit => {
                const shortHash = commit.sha.substring(0, 7);
                const author = commit.author ? `@${commit.author.login}` : 'Unknown';
                const message = commit.commit.message.split('\n')[0].replace(/\|/g, '\\|');
                commitTable += `| ${author} | ${shortHash} | ${message} |\n`;
              });
            }

            // Add deployment information
            const deploymentUrl = '${{ needs.build-and-deploy.outputs.deployment-url }}';
            let deploymentInfo = '';
            if (deploymentUrl) {
              deploymentInfo = `\n\n## Deployment\n\n🚀 **Deployed to:** ${deploymentUrl}\n`;
            }

            const releaseBody = commitTable + deploymentInfo;

            // Update the pre-release
            const { data: updatedRelease } = await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: '${{ needs.create-pre-release.outputs.release_id }}',
              body: releaseBody
            });

            console.log(`Pre-release updated with deployment info: ${updatedRelease.html_url}`);

  publish_release_on_success:
    name: '✅ Publish final release'
    environment: production
    runs-on: ubuntu-latest
    needs: [create-pre-release, update-release-with-deployment]
    if: ${{ success() }}
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: nightstem-web

      - name: Update pre-release to release
        uses: jhonny17/actions/update-release@main
        with:
          github_token: ${{ steps.generate-token.outputs.token }}
          release_id: ${{ needs.create-pre-release.outputs.release_id }}
          prerelease: false
          draft: false

  delete_release_on_failure:
    name: '🧹 Cleanup on failure'
    runs-on: ubuntu-latest
    needs:
      [
        bump-version,
        create-pre-release,
        build-and-deploy,
        update-release-with-deployment,
      ]
    if: ${{ failure() || cancelled() }}
    timeout-minutes: 10
    steps:
      - name: Generate App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: nightstem-web

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}

      - name: Delete release
        continue-on-error: true
        if: ${{ needs.create-pre-release.result == 'success' }}
        uses: jhonny17/actions/delete-release@main
        with:
          github_token: ${{ steps.generate-token.outputs.token }}
          release_id: ${{ needs.create-pre-release.outputs.release_id }}

      - name: Delete tag
        continue-on-error: true
        if: ${{ needs.bump-version.result == 'success' }}
        uses: jhonny17/actions/delete-tag@main
        with:
          github_token: ${{ steps.generate-token.outputs.token }}
          build_version: ${{ needs.bump-version.outputs.new_version }}

      - name: Revert version bump commit
        continue-on-error: true
        if: ${{ needs.bump-version.result == 'success' }}
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Find the version bump commit and revert only the package.json change
          BUMP_COMMIT=$(git log --oneline --grep="chore(release): bump version to" -n 1 | cut -d' ' -f1)

          if [ -n "$BUMP_COMMIT" ]; then
            echo "Found version bump commit: $BUMP_COMMIT"
            
            # Get the previous version from package.json before the bump
            PREV_VERSION=$(git show HEAD~1:package.json | grep '"version":' | cut -d'"' -f4)
            echo "Reverting to previous version: $PREV_VERSION"
            
            # Update package.json to previous version
            git checkout HEAD~1 -- package.json
            
            # Create a new commit with the revert
            git add package.json
            git commit -m "Revert version bump due to deployment failure (back to $PREV_VERSION)"
            
            # Push the revert
            git push origin main
          else
            echo "No version bump commit found, skipping revert"
          fi
