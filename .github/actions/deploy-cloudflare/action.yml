name: 'Deploy to Cloudflare Pages'
description: 'Deploy built application to Cloudflare Pages'

inputs:
  cloudflare-api-token:
    description: 'Cloudflare API token with Cloudflare Pages:Edit permission'
    required: true
  cloudflare-account-id:
    description: 'Cloudflare account ID (hex string)'
    required: true
  project-name:
    description: 'Cloudflare Pages project name (must exist in account)'
    required: true
  build-output-directory:
    description: 'Directory containing the built application (must exist)'
    required: false
    default: './out'
  wrangler-version:
    description: 'Wrangler version to use (semver format)'
    required: false
    default: '3.90.0'
  environment:
    description: 'Deployment environment (production or preview only)'
    required: false
    default: 'preview'

outputs:
  deployment-url:
    description: 'URL of the deployed application'
    value: ${{ steps.extract-urls.outputs.deployment-url }}
  deployment-alias:
    description: 'Alias URL of the deployment'
    value: ${{ steps.extract-urls.outputs.deployment-alias }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        set -euo pipefail

        # Validate environment
        ENV="${{ inputs.environment }}"
        if [[ ! "$ENV" =~ ^(production|preview)$ ]]; then
          echo "❌ Error: Invalid environment '$ENV'. Must be: production or preview"
          exit 1
        fi

        # Validate build directory exists
        BUILD_DIR="${{ inputs.build-output-directory }}"
        if [[ ! -d "$BUILD_DIR" ]]; then
          echo "❌ Error: Build directory not found: $BUILD_DIR"
          echo "📂 Available directories:"
          ls -la .
          exit 1
        fi

        # Check if build directory has content
        if [[ -z "$(ls -A "$BUILD_DIR")" ]]; then
          echo "❌ Error: Build directory is empty: $BUILD_DIR"
          exit 1
        fi

        # Validate account ID format (basic hex check)
        ACCOUNT_ID="${{ inputs.cloudflare-account-id }}"
        if [[ ! "$ACCOUNT_ID" =~ ^[a-fA-F0-9]{32}$ ]]; then
          echo "⚠️ Warning: Account ID format may be invalid (expected 32-char hex): $ACCOUNT_ID"
        fi

        echo "✅ Input validation passed"
        echo "📦 Build directory: $BUILD_DIR ($(ls -1 "$BUILD_DIR" | wc -l) files)"
        echo "🌍 Environment: $ENV"

    - name: Install Wrangler
      shell: bash
      run: |
        set -euo pipefail

        echo "📦 Installing Wrangler v${{ inputs.wrangler-version }}..."

        # Ensure pnpm is available
        if ! command -v pnpm &> /dev/null; then
          echo "🔧 Installing pnpm globally..."
          npm install -g pnpm
        fi

        # Install Wrangler with error handling
        if ! pnpm add wrangler@${{ inputs.wrangler-version }} -w; then
          echo "❌ Error: Failed to install Wrangler"
          exit 1
        fi

        # Verify installation
        if ! pnpm exec wrangler --version; then
          echo "❌ Error: Wrangler installation verification failed"
          exit 1
        fi

        echo "✅ Wrangler installed successfully"

    - name: Extract branch name
      id: extract_branch
      shell: bash
      run: |
        echo "branch_name=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

    - name: Deploy to Cloudflare Pages
      id: deploy
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ inputs.cloudflare-api-token }}
        accountId: ${{ inputs.cloudflare-account-id }}
        command: pages deploy ${{ inputs.build-output-directory }} --project-name=${{ inputs.project-name }} --branch=${{ inputs.environment == 'production' && 'main' || inputs.environment == 'staging' && 'staging' || 'preview' }}

    - name: Set deployment URLs
      id: extract-urls
      shell: bash
      run: |
        # For production, always use the custom domain
        if [[ "${{ inputs.environment }}" == "production" ]]; then
          echo "deployment-url=https://nightstem.com/" >> $GITHUB_OUTPUT
          echo "deployment-alias=https://nightstem.com/" >> $GITHUB_OUTPUT
        else
          # For staging/preview, use the actual deployment URL from wrangler-action
          echo "deployment-url=${{ steps.deploy.outputs.deployment-url }}" >> $GITHUB_OUTPUT
          echo "deployment-alias=${{ steps.deploy.outputs.deployment-url }}" >> $GITHUB_OUTPUT
        fi
